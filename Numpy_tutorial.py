# -*- coding: utf-8 -*-
"""Leonard _Numpy_Tutorial_24.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hzjzxqEEdjFOXzc2XIDwJGHJNc7x4gm_

# Definition

Numpy is a an open source Python library that provides support for large, multi-dimensional arrays and matrices, along with a collection of mathematical functions to operate on these elements. It  facilitates tasks such as basic linear algebra, basic statistical analysis, and more.

The core of the NumPy package is the ndarray object which consists of n-dimensional arrays of homogeneous data types (same type).

An array represents a grid of values which can be indexed by a tuple of integers, by booleans, by another array, or by integers.

#### Some benefits of Numpy

* More speed: NumPy uses algorithms written in C that complete in nanoseconds rather than seconds.
* Fewer loops: NumPy helps in  reducing for loops, making the code clearer
* Less memory: NumPy uses much less memory to store data and it provides a mechanism of specifying the data types.


#### Numpy arrays vs Python Lists
* The elements in a NumPy array are all required to be of the same data type (homogeneous) while a Python list can contain different data types within a single list.
* NumPy arrays are faster and more compact than Python lists.

# Setup
"""

from google.colab import drive
drive.mount('/content/drive')

"""Installing numpy"""

#!pip install numpy

"""Importing numpy"""

import numpy as np

"""Check the version of numpy"""

print(np.__version__)

"""# Array creation

Numpy array is created by using the function `np.array()`. All we need to do is
pass in a list, tuple or nested lists for two- or higher-dimensional data. We can also specify the type of data in the list using `dtype`.
"""

a1 = np.array([1,2,3])
a2 = np.array([1,2,3], ndmin=3)
a3 = np.array([[1,2,3], [4,5,6], [7,8,9]])
a4 = np.array([10,11,12.], dtype=np.float64)

print(a1,'\n\n',a2 , '\n\n',a3,"\n\n", a4)

#Creating array from tuple
a = np.array(((1,2,3,4),(4,6,7,6)))
a

"""## Dimension, shapes and types"""

print(f"The number of dimenssions of a1: {a1.ndim}")
print(f"The total number of element in a1: {a1.size}")
print(f"a1 shape is: {a1.shape}")
print(f"a2 shape is: {a2.shape}")
print(f"The number of dimenssions of a2: {a2.ndim}")
print(f"The total number of element in a2: {a2.size}")
print(f"a1 stores elements of types: {a1.dtype}")

"""## We can also create an array with specific values

### zeros
"""

# Create an array filled with 0
a = np.zeros((4,4))
a

"""### ones"""

#Create an array filled with 1
a = np.ones((5,5))
a

"""### full"""

# Create an array filled with same values (different from 0 and 1)
a = np.full((4,4),8)
a

"""### eye"""

#Create an identity array
#k shifts the diagonal of ones either to the right or left
I = np.eye(4, k=0) #np.identity(3,)
I

"""### arange"""

#Create an array with a range of elements
a = np.arange(10)
a

#Create an array with a range of elements while specifying the first number, the last one and the step size
a = np.arange(0,10,2)
a

"""### linspace"""

#Create a sequence of 20 values in range 0 to 10
a = np.linspace(0,10,20)
a

"""### random"""

#Create an array with random floats in the half-open interval [0.0, 1.0)
a = np.random.random((2,3))
a

# return a sample / samples from the standard normal distribution
np.random.randn(2,1)

#return integer/integers from the discrete uniform distribution
np.random.randint(2,10,(2,2))

"""## **Exercice 1:**

- Create a 3X2 integer array from a range between 20 to 80 such that the difference between each element is 10
- Print its attribute (shape,dimenssion, number of elements)
"""

## START YOUR CODE HERE ##
L=np.arange(20,80,10)
print(L)
print(len(L))

"""## **Exercice 2:**

1. Generate an array of 10 integers sampled from the discrete uniform distribution. low_limit = 1, high_limit = 10

2. Generate 100 samples from the normal distribution with mean 2 and varince 4. Hint: use `random.normal`
"""

## START YOUR CODE HERE ##
np.random.randint(1,10,(1,10))

np.random.normal(2,4,100)

"""## **Exercice 3:**

Create a null vector of size 10 and update the sixth value to 11
"""

## START YOUR CODE HERE ##
L=np.zeros(10)
print("Null vector",L)
L[5]=11
print("Updated Null vector", L)

"""# Indexing and slicing

## 1-D array

### Indexing
"""

#get the first element in the array
a = np.array([1,2,3,4,5,6,7])
a[0]

#get the last element in the array
a[-1]

"""#### Exercise: get the last element of a without using the negative indexing"""

## WRITE YOUR CODE HERE ##
a[len(a)-1]

"""### Slicing"""

print(a[1:5])
print(a[4:])
print(a[:4])

print(a[::2])
print(a[1:5:3])

"""## 2-D array

### Indexing
"""

#Get the element that correspond to the 1st row and 2nd colunm
a = np.array([[1,2,3],[10,11,12],[4,5,6]])
a[0,1]

a

#Get the last element from 2nd row
a[1,-1]

"""### Slicing"""

# Get all rows except the last one
a[:-1]

# Get all columns except the last one
a[:,:-1]

#Get all the rows except the last element and all the columns except the first one
a[:-1,1:-1]

"""#### **Exercise 1**:"""

a[1]

# a. Get the second row of the array
print("Second Row",a[1:-1,:])
print("Second Row",a[1:2,:])
print("Second Row",a[1])
# b. Get the first column of the array
print("First Column",a[:,:-2])
print(a[:,0])

"""#### **Exercise 2:** Get all the rows except the last one, and all the colums with step 2

Expected output:

        array([[ 1,  3],
               [10, 12]])
"""

## WRITE YOUR CODE HERE ##
print(a[:-1,::2])

"""# Copy"""

arr = np.array([2,3,4,5,6,7])
a = arr
b = arr.copy()
b

a[0]=0
print(a)
print(arr)
b[0]=10
print(b)
print(arr)

"""# Sorting, searching, concatenating, stacking, adding and removing elements

## Sorting

- To sort an array use the function `sort()`, where the axis can be specify. It  returns the copy of the array, leaving the original array unchanged.

By default it sorts the values in ascending order.
"""

a = np.array([4,3,1,6])
a_sort = np.sort(a)
#a_d= a.sort(reverse = True)
a_sort

#for i in range(len(a)):
 # if a[i]>a[i+1]:
  #  a[i],a[i+1]=a[i+1],a[i]

a = np.array([[20,3,1,6],[16,5,0,9]])
print(a,'\n\n')
a_sort = np.sort(a,axis=0)
a_sort

a_sort = np.sort(a,axis=1)
a_sort

"""## Searching"""

#search and get all the elements greater than 6 ==>indexing with boolean
arr = np.array([[2,4,6,8],[9,12,14,20]])
arr[arr>=6]

"""Search all the elements greater that 6 using `np.where`"""

arr[np.where(arr>6)]

"""## Concatenating

- To concatenate two arrays, use the function `concatenate()`. All the input array dimensions must match.
"""

a1 = np.array([1,2,3])
a2 = np.array([4,5,6])
b = np.concatenate((a1,a2)) #np.concatenate((a1,a2), axis=0)
b

a1 = np.array([[1,2,3],[4,5,6]])
a2 = np.array([[7,8,9],[4,5,6]])
c = np.concatenate((a1,a2))
c

a1 = np.array([[1,2,3]])
a2 = np.array([[7,8,9]])
np.concatenate((a1,a2), axis=1)

"""## Stacking

- Arrays can be stack  in sequence horizontally using `np.hstack` or vertically using `np.vstack`.

Example:
"""

#Stack the arrays horizontally using np.hstack
a1 = np.array([1,2,3])
a2 = np.array([4,5,6])
b = np.hstack((a1,a2))
b

#Stack the arrays vertically using np.vstack
a1 = np.array([[1,2,3]])
a2 = np.array([4,5,6])
b = np.vstack((a1,a2))
b

"""Note: The output of the vstack operation is a 2d array even though inputs where 1-d. Using np.concatenate this will not work since it supposed to concatenate based on columns (axis=1).

## Adding elements

- To add elements in an array use:
-  `append()` to append items to array
- `insert()` to insert items into array at axis 0 or 1
"""

a = np.array([1,2,3])
np.append(a,2) #append at the end

np.insert(a,2,5) #insert in a specific index

b = np.array([[1,2,3],[4,5,6]])
print(b, '\n')
np.insert(b,2,9,axis=1)

"""## Removing elements

- To remove an element from an array we can use:
- `slicing`
- `np.delete()` and pass the specific element we want to delete
"""

a = np.array([1,2,3])
b = a[a!=2]
b

#To use np.delete to remove 2 in a there is a need to know the position of 2
np.delete(a,1)

#remove elements along the specified axis.
a = np.array([[1,1,3],[2,1,2]])
print(a, '\n')
b = np.delete(a,1,axis=1) #remove the column (axis 1 ) with index 1
b

"""## **Exercise 1:** Sort an array

Sort *the* given array in descending order
"""

a = np.array([4,6,9,12,4,6,0])

##  WRITE YOUR CODE HERE ##
a_sorted=np.sort(a)
a_sorted[::-1]

"""## **Exercise 2**:
Find the k number of the smallest values from an array
"""

a = np.array([4,6,9,12,4,6,0])
k = 4
##  WRITE YOUR CODE HERE ##
a_sorted=np.sort(a)
a_sorted[:4]
print(a_sorted[len(a_sorted)-4:])
print(a_sorted)

"""## **Exercise 3:**
From below Numpy array:
- Return array of even number
- Return array of odd rows and even columns

"""

new_array = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])

##  START YOUR CODE HERE ##
result1 = new_array[:,1: :2]

result2= new_array[1::2,0::2]

result1

result2

## TEST YOUR CODE HERE ##

# case 1:
output1 = np.array([[ 2,  4],
                  [ 6,  8],
                  [10, 12]])
assert np.any(result1== output1)

#case 2:
output2 = np.array([[ 5, 7]])
assert np.any(result2== output2)

"""## **Exercise 4:**

Let a and b two vectors of shape (3,1), (3,1) respectively.

Joint these two vectors such that the resulting array has a shape (3,2)
"""

a = np.array([[1],[2],[3]])
b = np.array([[1],[1],[1]])

##  WRITE YOUR CODE HERE ##
c = np.hstack((a,b))
c

"""# Reshaping, adding a new axis to an array, flattening, and shuffling

## Reshaping

- To reshape an array use the function `reshape()`. The new shape have to be compatible with the original shape.
"""

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])

print("Array : " + str(arr))

# converting it to 3-D from 1-D array
reshaped = arr.reshape((1,4,4))
print("Reshaped 3-D Array : ")
print(reshaped)

"""## Adding a new axis

- Function  `np.newaxis` and `np.expand_dims` can be used to increase the dimensions of an existing array.
"""

#Using np.newaxis

a = np.array([1,2,3,4])
print(a)
print(a.shape, '\n')

# add new axis as first dimenssion
b = a[np.newaxis,:]
print(b)
print(f"The shape of a after adding a new axis is: {b.shape}", '\n')

# add new axis as second dimenssion
c = a[:,np.newaxis]
print(c)
print(f"The shape of a after adding a new axis is: {c.shape}")

#Using np.expand_dims

a = np.array([1,2,3,4])
print(a.shape)


# an axis at index position 0
b = np.expand_dims(a, axis=0)
print(f"The shape of a after adding a new axis is: {b.shape}")

# an axis at index position 1
c = np.expand_dims(a, axis=1)
print(f"The shape of a after adding a new axis is: {c.shape}")

"""## Flattening

- To flatten an array into 1D array, two functions can be used: `flatten()` and `ravel()`.

 When using `ravel()`, any changes to the new array will affect the original array as well.
"""

a = np.array([[1,2],[3,4]])
print(a, '\n')

c = a.ravel()
c[0]=0
print(c)
print(a)

a = np.array([[1,2],[3,4]])
c = a.flatten()
c[0]=0
print(c)
print(a)

"""## Shuffling

It is an inplace operation.
"""

a = np.arange(10)
print(a, '\n')
np.random.shuffle(a)
print("After shuffling: ", a)

"""
## Exercise
Consider two vectors a and b of shapes (5,1) and (5,) respectively.
Compute the difference a-b such that the resulting output vector has a shape (1,5)"""

a = np.array([[1],[1],[0],[0],[0]])
b = np.array([1,1,1,1,0])

c=(a.reshape(1,5))-np.expand_dims(b,axis=0)
print(c)
print(c.shape)

a = np.array([[1],[1],[0],[0],[0]])
b = np.array([1,1,1,1,0])

## WRITE YOUR CODE HERE ##
c=(a-(b.reshape(5,1))).reshape(1,5)
print(c)
print(c.shape)

"""# Basic array operations

We are going to cover few opreations including addition, substraction and multiplication, etc.

Before that we will review some key concepts and very important terms in Numpy array.

### 1. `Vectorization`

vectorization involves performing mathematical operations on entire arrays while explicetly eliminating  looping through individual elements (these things are taking place, of course, just “behind the scenes” in optimized, pre-compiled C code). This is one of the reason while operations on Numpy array are fast.

**Example**

Let's compare the time it takes to perform a loop-based addition operation with the equivalent vectorized operation.
"""

import time

a1 = np.array([[1,2,2],[3,4,4]])
a2 = np.array([[5,6,6],[7,8,8]])

start = time.time()
a1+a2
end = time.time()

print(end-start)

start = time.time()
sum = np.zeros(a1.shape)
for i in range(a1.shape[0]):
  for j in range(a1.shape[1]):
    sum[i][j] = a1[i][j] + a2[i][j]
end = time.time()
print(f"The execution time using foor loop is : {end-start}")
print(sum)

start = time.time()
sum = a1+a2
end = time.time()
print(f"The execution time using vectorization is : {end-start}")
print(sum)

"""## a. Multiplication operation

- Element wise multiplication using `*` or `np.multiply`
"""

a1 = np.array([[1,2],[3,4]])
a2 = np.array([[4,1],[1,1]])
mul = a1*a2
mul

"""- Matrix multiplication using `@` or `np.dot()`"""

a1@a2

"""## Division operation using `/` or `np.divide()`"""

a1/a2 #element wise

"""## Other operations

- Get sum of elements in an array using `sum()` function
"""

#sum over axis 0 (columns)
a1 = np.array([[1,2],[3,4]])
print(a1)
a1.sum(axis=0)

#sum over axis 1 (rows)
a1.sum(axis=1)

"""- Get the mean of elements in an array using `mean()` function"""

a1.mean()

"""Get the standard deviation of elements in an array using `std()` function"""

a1.std()

"""- Get the max and the min using respectively `max()` and `min()`


"""

#max of all the elements in the array
a1.max()

#max over the rows
a1.max(axis=0)

#max over the columns
a1.max(axis=1)

"""* Get index corresponding to the maximum and minimum value.

 By default, the index is into the flattened array
"""

a1.ravel()

print(np.argmax(a1))
print(np.argmin(a1))

print(np.argmax(a1,axis=1))

"""### Comparison"""

#operator equal
a = np.array([1,1])
b = np.array([1,2])
a==b

#Not equal
a!=b

#Smaller than
a<b

#Array-wise comparison
np.array_equal(a,b)

"""#### Exercise 1

Test whether each element of the first array  is also present in a second array.
"""

a1 = np.array([4,8,10,22])
a2 = np.array([4,10,13,56,22,44,60,8])

## START YOUR CODE HERE ##
np.array_equal(a1,a2)

a1 = np.array([4,8,1])
a2 = np.array([10,4,8,8,9,1])
np.all(np.isin(a1,a2))
#a1==a2

"""#### Exercice:

Calculate the square of each element of the following array
"""

a = np.array([[2,3,2],[4,2,1]])

## WRITE YOUR CODE HERE ##
a**2

"""## 2. `Broadcasting`

Consider a case where we want to carry out an operation between a vector and a scalar
"""

a = np.array([1,2])
a*2

"""To achieve this, Numpy understands that the multiplication should happen with each cell: it is called broadcasting.

Broadcasting refers to a mechanism that allows NumPy to perform operations on arrays of different shapes.
The dimensions of the array must be compatible.

Two dimensions are compatible when:
- they are equal, or
- one of them is 1.

If the dimensions are not compatible, you will get a ValueError.

#### Illustration
"""

#Illustration 1
a1 = np.array([1,2,1])
a2 = np.array([2,2])

#print(a1.shape, a2.shape)
#a1+a2
print(a1.shape)
print(a2.shape)

a1.reshape(3,1)+a2

#Illustration 2
a1 = np.array([[1,1],[2,2],[3,3]])
a2 = np.array([[1,2]])
print(a1.shape, a2.shape)
# Are a1 and a2 broadcastable??

a1+a2

a1 = np.array([[1,1],[2,2],[3,3]])
a2 = np.array([[1],[2],[3]])
a2+a1

"""## References

- https://numpy.org/doc/stable/user/absolute_beginners.html
- https://realpython.com/numpy-tutorial/
"""

